name: Run k6 test in Fargate

on:
  push:
    branches:
      - main
     
jobs:
  build_and_push_docker_image_us_east_1:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials (us-east-1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR (us-east-1)
        run: aws ecr get-login-password | docker login --username AWS --password-stdin 381491835787.dkr.ecr.us-east-1.amazonaws.com/k6-test-repo

      - name: Build and push Docker image (us-east-1)
        run: |
          # Build the Docker image
          docker build -t k6-amd64-image .

          # Tag the Docker image for ECR
          docker tag k6-amd64-image:latest 381491835787.dkr.ecr.us-east-1.amazonaws.com/k6-test-repo:latest-k6-amd64

          # Push the Docker image to Amazon ECR
          docker push 381491835787.dkr.ecr.us-east-1.amazonaws.com/k6-test-repo:latest-k6-amd64

  build_and_push_docker_image_us_east_2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials (us-east-2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR (us-east-2)
        run: aws ecr get-login-password | docker login --username AWS --password-stdin 381491835787.dkr.ecr.us-east-2.amazonaws.com/k6-test-repo

      - name: Build and push Docker image (us-east-2)
        run: |
          # Build the Docker image
          docker build -t k6-amd64-image .

          # Tag the Docker image for ECR
          docker tag k6-amd64-image:latest 381491835787.dkr.ecr.us-east-2.amazonaws.com/k6-test-repo:latest-k6-amd64

          # Push the Docker image to Amazon ECR
          docker push 381491835787.dkr.ecr.us-east-2.amazonaws.com/k6-test-repo:latest-k6-amd64
  
  run_k6_tests_us_east_1:
    needs:
      - build_and_push_docker_image_us_east_1
      - build_and_push_docker_image_us_east_2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run Fargate task in us-east-1
        id: run_ecs_task_us_east_1
        run: |
          # Register the task definition and store the output in a variable
          task_output=$(aws ecs register-task-definition --cli-input-json file://k6-fargate-task-definition.json)

          # Extract the task definition ARN from the output using jq
          task_definition_arn=$(echo "$task_output" | jq -r '.taskDefinition.taskDefinitionArn')

          # Print the task definition ARN
          echo "Task Definition ARN: $task_definition_arn"
          
          # Run the task definition
          aws ecs run-task --cluster k6-cluster --task-definition k6-fargate-task-definition --count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[subnet-02c86683914e981ba],securityGroups=[sg-02c063e98df05c8fb],assignPublicIp=ENABLED}"
          
          sleep 20

          # Deregister the task definition
          aws ecs deregister-task-definition --task-definition "$task_definition_arn"

  run_k6_tests_us_east_2:
    needs:
      - build_and_push_docker_image_us_east_1
      - build_and_push_docker_image_us_east_2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Run Fargate task in us-east-2
        run: |
          # Register the task definition and store the output in a variable
          task_output=$(aws ecs register-task-definition --cli-input-json file://k6-fargate-task-definition2.json)

          # Extract the task definition ARN from the output using jq
          task_definition_arn=$(echo "$task_output" | jq -r '.taskDefinition.taskDefinitionArn')

          # Print the task definition ARN
          echo "Task Definition ARN: $task_definition_arn"
          
          aws ecs run-task --cluster k6-cluster1 --task-definition k6-fargate-task-definition2 --count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[subnet-01f80be24e81f49ef],securityGroups=[sg-0f291a4776c0b19e6],assignPublicIp=ENABLED}"
          
          sleep 20

          # Deregister the task definition
          aws ecs deregister-task-definition --task-definition "$task_definition_arn"

  generate_reports_for_us_east_1:
    needs: 
      - run_k6_tests_us_east_1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install k6
        run: |
          curl -L https://github.com/loadimpact/k6/releases/download/v0.50.0/k6-v0.50.0-linux-amd64.tar.gz | tar xz
          sudo mv k6-v0.50.0-linux-amd64/k6 /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate k6 Report for us-east-1
        run: |
          mkdir -p reports
          # Get the latest log stream name
          latest_stream_name=$(aws logs describe-log-streams \
          --log-group-name k6-fargate-task-log \
          --order-by LastEventTime \
          --descending \
          --max-items 1 \
          --query 'logStreams[0].logStreamName' \
          --output text | tr -d '\n' | sed 's/None//g' | awk '{$1=$1};1')
          
          # Print the latest log stream name
          echo "Latest log stream name: $latest_stream_name"

          # Store the latest log stream name in a variable
          export LATEST_STREAM_NAME="$latest_stream_name"

          # Get the timestamp of latest log stream name
          timestamp=$(aws logs get-log-events \
          --log-group-name k6-fargate-task-log \
          --log-stream-name "$LATEST_STREAM_NAME" \
          --limit 1 \
          --output json \
          | jq -r '.events[0].timestamp')
          
          # Print the timestamp of log stream
          echo "Timestamp: $timestamp"

          # Convert the timestamp to formatted date
          formatted_date=$(date -d "@$((timestamp / 1000))" +"%Y-%m-%d %H:%M:%S")
          
          # Print the formatted date
          echo "K6 Test run on: $formatted_date"

          aws logs get-log-events \
          --log-group-name k6-fargate-task-log \
          --log-stream-name "$LATEST_STREAM_NAME" \
          --output json > reports/us-east-1-log-events.json
          export REGION=us-east-1
          cat reports/us-east-1-log-events.json | jq -r '.events[].message' > reports/us-east-1-k6-logs.json
          k6 run scripts/k6-script.js --out json=reports/us-east-1-k6-logs.json

      - name: Commit and Push K6 Report for us-east-1
        run: |
          git config --global user.email "krnilendra@gmail.com"
          git config --global user.name "nilendra82"
          git add reports/us-east-1-log-events.json
          git add reports/us-east-1-k6-logs.json
          git commit -m "Add K6 test results for us-east-1"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload k6 results to S3 for us-east-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        run: |
          aws s3 cp reports/us-east-1-k6-logs.json s3://k6s3bucket/reports/us-east-1-k6-logs.json

  generate_reports_for_us_east_2:
    needs: 
      - run_k6_tests_us_east_2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install k6
        run: |
          curl -L https://github.com/loadimpact/k6/releases/download/v0.50.0/k6-v0.50.0-linux-amd64.tar.gz | tar xz
          sudo mv k6-v0.50.0-linux-amd64/k6 /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Generate k6 Report for us-east-2
        run: |
          # Get the latest log stream name
          latest_stream_name=$(aws logs describe-log-streams \
          --log-group-name k6-fargate-task-log \
          --order-by LastEventTime \
          --descending \
          --max-items 1 \
          --query 'logStreams[0].logStreamName' \
          --output text | tr -d '\n' | sed 's/None//g' | awk '{$1=$1};1')
          
          # Print the latest log stream name
          echo "Latest log stream name: $latest_stream_name"

          # Store the latest log stream name in a variable
          export LATEST_STREAM_NAME="$latest_stream_name"

          # Get the timestamp of latest log stream name
          timestamp=$(aws logs get-log-events \
          --log-group-name k6-fargate-task-log \
          --log-stream-name "$LATEST_STREAM_NAME" \
          --limit 1 \
          --output json \
          | jq -r '.events[0].timestamp')
          
          # Print the timestamp of log stream
          echo "Timestamp: $timestamp"

          # Convert the timestamp to formatted date
          formatted_date=$(date -d "@$((timestamp / 1000))" +"%Y-%m-%d %H:%M:%S")
          
          # Print the formatted date
          echo "K6 Test run on: $formatted_date"

          aws logs get-log-events \
          --log-group-name k6-fargate-task-log \
          --log-stream-name "$LATEST_STREAM_NAME" \
          --output json > reports/us-east-2-log-events.json
          cat reports/us-east-2-log-events.json | jq -r '.events[].message' > reports/us-east-2-k6-logs.json
          export REGION=us-east-2
          k6 run scripts/k6-script.js --out json=reports/us-east-2-k6-logs.json

      - name: Upload k6 results to S3 for us-east-2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
        run: |
          aws s3 cp reports/us-east-2-k6-logs.json s3://k6s3bucket/reports/us-east-2-k6-logs.json
